[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PHC 6701: R for Data Science // Advanced R",
    "section": "",
    "text": "If you want help, there is a great community of R programmers on Slack: https://rfordatasci.com/."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "lessons/lesson02_suppl_scripts.html",
    "href": "lessons/lesson02_suppl_scripts.html",
    "title": "Lesson 2 Supplement: R Scripts",
    "section": "",
    "text": "So far, if you needed to repeat all of the work you have done today, you would be in serious trouble! If we can repeat what we did, then we certainly can’t call our work reproducible. One simple thing we can do, is to write our code in a script.\n\n\nTo create a new script, go to “File” > “New File” > “R Script”. The keyboard shortcut for this is CTRL + Shift + N on Windows, and CMD + Shift + N on Mac. You should now have a window that looks like this:\n\nAt the top of your script, you should include information about who wrote the script, when it was written, and why. Note that this information is a special form of code comment, and should be marked as such.\n\n\n\n\n\n\nExercises\n\n\n\n\nCreate a new script to run some of the commands you learned in Lesson 2. Add the meta-information at the top of your script. Notice that the colour of the file name changed from black to red.\nAdd some of the code from that lesson (a few operations).\nAdd comments explaining to yourself what these operations are doing.\nSave your script with a good name, and—if possible–today’s date (in a computer-sortable format). Notice that your file name font colour changed from red back to black. Why? Mac Users: make sure you add .R to the end of your file name.\n\n\n\nThis is what mine looks like:\n\nAs you learn more about R, your comments should quickly become more about why you did what you did, rather than what you did."
  },
  {
    "objectID": "lessons/lesson04_ggplot.html",
    "href": "lessons/lesson04_ggplot.html",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "",
    "text": "What did we learn last class?\n\nBenefits of reproducible reports\nR packages and how to install them\nThe components of a basic RMarkdown report\nMarkdown customisation options"
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#unpacking-the-title",
    "href": "lessons/lesson04_ggplot.html#unpacking-the-title",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "Unpacking the Title",
    "text": "Unpacking the Title\nWe will start with “graphics”, because most people are most familar with graphs. Then we will work backwards.\n\nGraphics\nIn computational parlance, a graphic is a visual representation of organized information, displayed to the screen or stored in a file. Consider this picture:\n\nThis is a visual representation of information, but it isn’t useful. It isn’t organized, and we cannot draw any meaning from it. The most basic graphic of our data is a screenshot of it, but that usually doesn’t help anyone!\n\n\nGrammar of Graphics\nAs we see in the figure above, we need our graphics to follow a set of rules. A grammar is a set of the fundamental principles and rules of a discipline, so the grammar of graphics is the set of fundamental rules for displaying organised information (Wickham, 2010).\n\nA grammar provides a strong foundation for understanding a diverse range of graphics. A grammar may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics. This is easy to see by analogy to the English language: good grammar is just the first step in creating a good sentence. - Hadley Wickham\n\n\n\nLayering\nIf grammar helps us construct a sentence in the proper way, layering helps us combine multiple sentences into a paragraph. We use layers to “stack” different levels of results and statistics. Let’s walk through Wickham’s original example (ibid., p. 4).\n\nExample Data\nConsider the following toy data:\n\n\n\nA\nB\nC\nD\n\n\n\n\n2\n3\n4\na\n\n\n1\n2\n1\na\n\n\n4\n5\n15\nb\n\n\n9\n9\n80\nb\n\n\n\nA simple research question we may have is, does changing C affect A, and is this effect mitigated by D? To answer this, we would probably build a scatterplot of C and A, with point size, shape, or colour set by D. That is, we assign C to take values on the horizontal axis, A to take values on the vertical axis, and D to take values on some other axis (shape, for instance). The resulting data set looks like this:\n\n\n\nx\ny\nShape\n\n\n\n\n2\n4\na\n\n\n1\n1\na\n\n\n4\n15\nb\n\n\n9\n80\nb\n\n\n\nNow, we are making some progress, but we still haven’t told the computer what to do with this information. Recall that one of the major goals of this class is to help you tell the computer what you want. Your computer needs to translate these points and shape labels into actual pixels on the screen.\n\n\nExample Data Mapped\nLet’s pretend that we give a 200 x 300 window to R to plot these points. The resulting pixel locations and shapes will look like this:\n\n\n\nx\ny\nShape\n\n\n\n\n25\n11\ncircle\n\n\n0\n0\ncircle\n\n\n75\n53\nsquare\n\n\n200\n300\nsquare\n\n\n\nThis yields one layer with the overall shape and behaviour of the data:\n\nNotice however, that we don’t have any scales for these values. The values R supplied to the computer are in shapes and pixel locations, but we humans can’t interpret what this means. We need another layer for the axes.\n\nFinally, we need a layer for the labels. When we stack these layers (axes, labels, then data), we see the following composed graph:\n\nWhen we construct figures, we often take for granted the complexity inherent in the task. For our work, we will be constructing figures layer by layer, so it is important to understand these mechanics."
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#the-tidyverse",
    "href": "lessons/lesson04_ggplot.html#the-tidyverse",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "The Tidyverse",
    "text": "The Tidyverse\nThe Tidyverse is a suite of inter-related packages that make data science in R easier. The components of the Tidyverse are:\n\nggplot2: make graphs\ntibble: create very nice “tidy” data tables from scratch\ntidyr: clean “messy” data into “tidy” data\nreadr: import raw data\npurrr: help you create and apply functions to your data\ndplyr: manipulate “tidy” data tables\nstringr: operate on character strings\nforcats: recode and modify catagorical variables in R, also known as factors (“forcats” is an abbreviation of for categorical variables, and also an anagram of “factors”)\n\nTo be completely honest, we could spend the entire semester on these eight packages. However, we will not be able to do that at this juncture. We are not going to cover the forcats package, and we will use some of the time in this semester diving deeper into the “inner workings” of R (we will use the Advanced R textbook for that)."
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#the-variables",
    "href": "lessons/lesson04_ggplot.html#the-variables",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "The Variables",
    "text": "The Variables\nThere are a few variables in this data set, including\n\ndispl: the engine displacement in litres, and\nhwy: the highway fuel efficiency in miles per gallon.\n\n\n\n\n\n\n\nExercise\n\n\n\nCheck the definitions and explanations of the other variables in the help file on the mpg object.\n\n\nRecalling that data science is an intersection of statistics, computing, and domain knowledge, we think about what domain knowledge we have concerning automobiles to create an hypothesis. Some of this domain knowledge comes from our previous courses in physics: we think that engines that are heavier probably aren’t as fuel efficient. We will now test this hypothesis graphically."
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#engine-size-by-fuel-economy",
    "href": "lessons/lesson04_ggplot.html#engine-size-by-fuel-economy",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "Engine Size by Fuel Economy",
    "text": "Engine Size by Fuel Economy\nWe are going to construct a graph first. I will give you the code and the figure, then we will deconstruct it.\n\nggplot(data = mpg) +\n  aes(x = displ, y = hwy) +\n  geom_point()\n\n\n\n\nWell, at first glance, it certainly seems that larger engines are less fuel efficient.\nWithin the code itself, the components in this code are organized in a logical manner and with a corresponding set of rules—that is, a grammar. That’s what the gg part stands for—the grammar of graphics.\n\n+: The Layer Glue\nNotice that each of the lines above are connected by the plus sign, “+”. In this context, the + symbol operates to “add” layers together, but you can still use it to add numbers too. If you are more familiar with R, but not familiar with the tidyverse, then the idea of “adding” one function to another seems absurd. However, as you’ll see soon, we can “add” more and more layers to a single graph with this + operator.\n\n\nThe data Layer\nThe first line in the code, ggplot(data = mpg), provides the base layer of the graphic. Recall the function syntax we have learned previously:\n\nThe function is named ggplot\nThe first argument of the function is called data\nWe supply the data set mpg as the value to this data argument\n\nThink of this as a blank canvas that you will paint on. In this case, the data set mpg provides the material from which to create the canvas.\n\n\n\n\n\n\nExercise\n\n\n\nRun ggplot(data = mpg). What does this look like?\n\n\nThe ggplot() function takes data tables only in a certain form. Recall the exercise from Lesson 1 on finding help? We first read about the str function then.\n\n\n\n\n\n\nExercise\n\n\n\nUse the str() function to confirm that the mpg object has data.frame as one of its classes.\n\n\nIf you ever have trouble with ggplot(), make sure your data frame is tidy! Later this semester, we will discuss some things to do if your data table is not tidy (using the tidyr, tibble, and readr packages in the tidyverse).\n\n\nThe Aesthetic Mapping Layer\nNow that we have created a canvas to paint on, we need to choose our proverbial “colour palette” and plan where our “paintbrush” will go. That is, we need to specify which measurements contained in the mpg data set we are going to use, and how they will influence the blank canvas. Now, consider the second line of code: aes(x = displ, y = hwy). Following what we know about function syntax, we can deconstruct this line as follows:\n\nThe function is named aes\nThe first argument of the function is named x\nWe supply the value of the object displ as to the argument x\nThe second argument of the function is named y\nWe supply the value of the object hwy as to the argument y\n\nNow, if you have been paying attention, you’ll notice that we don’t have any objects named displ or hwy in the “Environment” pane.\n\n\n\n\n\n\nExercises\n\n\n\n\nRun displ and hwy in the “Console”. What happens?\nRun\n\n\nggplot(data = mpg) +\n  aes(x = displ, y = hwy)\n\n\nHow is this different from the first layer alone? Remember to use the “+” symbol to add one layer to another.\n\nWhere did R find the values for displ and hwy? What would you do if you needed to add different values to the aesthetic layer?\nAdd 3 and 5 together. Is there anything else different with the + function?\n\n\n\n\n\nThe Geometric Object Layer\nWe now have a canvas to plot our points, and a system of axes to know where the points belong. Now we need to tell ggplot() how to plot x and y. This is where the the geom_*() functions come into play: we wanted a scatterplot, so we picked geom_point(). This is simply a call to the function geom_point with no arguments. “Geom” is short for “geometric object”, and there are quite a few geometric shapes we can bend our data into (more on this later).\n\n\n\n\n\n\nExercises\n\n\n\n\nRun the original code (copied below) and compare it to the previous figure. What did the geometric layer add to the plot?\n\n\nggplot(data = mpg) +\n  aes(x = displ, y = hwy) +\n  geom_point()\n\n\nLook up the help manual for the geom_point function. Recall our conversation on functions in Lesson 1. What are some of the arguments for the geom_point function? Where do you think the values of the arguments for this function came from?"
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#common-aesthetics",
    "href": "lessons/lesson04_ggplot.html#common-aesthetics",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "Common Aesthetics",
    "text": "Common Aesthetics\nThere are quite a few aesthetics to choose from to modify our scatterplot:\n\ncolour: What color to make our points? Good for continuous and discrete features.\nsize: How big should the points be? Better for continuous features.\nalpha: How opaque / transparent should the points be? Values range from \\([0,1]\\), with \\(1\\) being completely opaque. Better for continuous features.\nshape: What shape should the points have? Better for discrete features. Options are shown below \nfill: For the shapes filled with red, what color should you put instead? Better for discrete features, but is limited when plotting points. The fill aesthetic truly shines with geoms other than point, but more on that later.\n\nFor most of these aesthetics, the behavior of the graph will change depending on if you map a discrete or continuous feature to it. For example, if you map a continuous feature to the colour aesthetic, the points will be given a continuous color gradient (by default, from dark blue to light blue). However, if you map character information to the colour aesthetic, the points will be distinctly different (discrete) in color."
  },
  {
    "objectID": "lessons/lesson04_ggplot.html#examples",
    "href": "lessons/lesson04_ggplot.html#examples",
    "title": "Lesson 4: ggplot and the Layered Grammar of Graphics",
    "section": "Examples",
    "text": "Examples\n\n\n\n\n\nLook back to the figure. You might notice that there is a group of five points on the top right that stick out: these cars have large engines but higher MPG than other vehicles with large engines. We could ask a few questions to try to explain this disparity:\n\nAre these vehicles hybrids?\nDo these vehicles use diesel?\nAre these vehicles newer?\n\nEach question is a hypothesis, and we will attempt to “test” these hypotheses visually.\n\nHypothesis 1: Outlier Cars are Hybrids\nCheck the help documentation for the mpg data set to find out which column measures the type of the car. We probably won’t see “hybrid”” in this list, because we know that very few hybrid cars were in production in both 1998 and 2008. These cars would have all been classified as “compact” or “sub-compact”. Note: this is where “domain knowledge” is critical for proper data science.\nNow what type of feature is class? The column header of the mpg data table informs us that this feature is a character feature (chr), and therefore discrete. Therefore, we can add it to the graph with the colour or shape aesthetics.\n\n\n\n\n\nIt appears that our hypothesis was incorrect. These vehicles are not small, hybrid cars at all, but sports cars or midsize cars.\n\n\n\n\n\n\nExercise\n\n\n\nWrite the code necessary to create the above graph.\n\n\n\n\nHypothesis 2: Outlier Cars take Diesel\n\n\n\n\n\nOur hypothesis is incorrect. It appears that all five of our outlier vehicles take premium fuel (“p”), not diesel (“d”). This graph, when paired with the previous graph on car class, gives us a better understanding of factors that could influence the relationship between engine size and fuel economy.\n\n\n\n\n\n\nExercises\n\n\n\n\nUsing the help manual for the mpg data set, find which feature of the data measures fuel type.\nWrite the code necessary to create the above graph. Hint: the shape of the points is controlled by the shape argument to the aes() function.\n\n\n\n\n\nHypothesis 3: Outlier Cars are Newer\nWe know that vehicle year can be either 1998 or 2008. Because the manufacture year is a time, we should add it to the graph with the colour, size, fill, or alpha aesthetics.\n\n\n\n\n\nThe manufacture year doesn’t help explain the five outlier points very well. They are rather evenly split between 2000 and 2008.\n\n\n\n\n\n\nExercise\n\n\n\nWrite the code necessary to create the above graph. Hint: the shape is not dependent on the data, so it is not an aesthetic. Think about where you should put the shape argument if you can’t put it in the aes() function.\n\n\n\n\nUpdated Hypothesis: Outlier Cars are Sportscars\nWe can add more than 3 features to a plot. Let’s create an engine size by MPG plot with fuel type and car class added.\n\n\n\n\n\nThis looks promising: it appears that all five outliers take premium fuel, and four of the five outliers are 2-seater coupes. This means that our outliers are probably sports / performance cars: larger engines but lighter bodies.\n\n\n\n\n\n\nExercise\n\n\n\nWrite the code necessary to create the above graph.\n\n\nIf you’re thinking to yourself, “I wish there was a way to clean this graph up, to only show the premium fuel and two-seater cars”, then you are thinking what I’m thinking. However, we need some functions from the dplyr package first, which we will cover in a few weeks. The ggplot package also gives us a way to break graphs into mutually-exclusive pieces, called facets, which we will discuss shortly."
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html",
    "href": "lessons/lesson02_introduction_to_R.html",
    "title": "Lesson 2: Introduction to R",
    "section": "",
    "text": "Data science is the intersection of statistics, code, and domain knowledge.\n\n\n\nData science has a few major components:\n\nData Preparation and Exploration\nData Representation and Transformation\nComputing with Data\nModelling Data\nVisualizing and Presenting Data\nScience / Philosophy about Data Science\n\nReproducible research is pre-producible: research results that have been created with code can be re-created at will.\n\"Hello, world!\""
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#characters",
    "href": "lessons/lesson02_introduction_to_R.html#characters",
    "title": "Lesson 2: Introduction to R",
    "section": "Characters",
    "text": "Characters\nYour first code in R last class was to instruct R to tell the world hello. R uses \" (double quotes) and ' (single quotes) to mark textual information.\n\n\n\n\n\n\nExercise\n\n\n\nInstruct R to greet your neighbour, but using single quotes instead of double quotes. What changed?\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can use the “up arrow” key to recall the last command you typed."
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#scalar-arithmetic",
    "href": "lessons/lesson02_introduction_to_R.html#scalar-arithmetic",
    "title": "Lesson 2: Introduction to R",
    "section": "Scalar Arithmetic",
    "text": "Scalar Arithmetic\nR can do lots of powerful things, but it can also act as a very simple calculator. To add two numbers, after the > prompt, type\n\n> 867 + 5309\n\nIf you would like to chain multiple operations together, you can use multiple lines. The catch: you have to end all but your last line with an operator.\n\n> 24 *\n+   7\n\n\n\n\n\n\n\nExercise\n\n\n\nType your age, then the plus sign (+), then hit Enter. What happens to the prompt? Can you type other commands, like a \"Hello, world!\"? What do you think you should do to get the original prompt back?\n\n\nNote that from here on out, I will be assuming that you will type code at the proper > prompt, so I won’t include that anymore.\nWhy “scalar” arithmetic? Did you notice the “[1]” next to your answers? In mathematics, a scalar is a quantity represented in one dimension, or—as most commonly refer to them—numbers. We will return to this concept, and why it is important in R, shortly."
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#logic",
    "href": "lessons/lesson02_introduction_to_R.html#logic",
    "title": "Lesson 2: Introduction to R",
    "section": "Logic",
    "text": "Logic\nWe can use R’s logic system to compare values. A simple comparison is, “is 5 less than 3”? In R, this is\n\n5 < 3\n\n[1] FALSE\n\n\nThis comparison returns a logical indicator, FALSE. Notice that this value is not surrounded by quotes, and it’s also not a “number”. TRUE and FALSE are special symbols in R.\nThe following symbols are useful in logical comparisons:\n\n\n\nSymbol\nMeaning\nExample\n\n\n\n\n>\ngreater than\n5 > 3\n\n\n<\nless than\n5 < 3\n\n\n>=\ngreater than or equal to\n5 >= 3\n\n\n<=\nless than or equal to\n5 <= 3\n\n\n==\nequal to\n5 == 3\n\n\n!=\nnot equal to\n5 != 3"
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#the-code-comment",
    "href": "lessons/lesson02_introduction_to_R.html#the-code-comment",
    "title": "Lesson 2: Introduction to R",
    "section": "The Code Comment",
    "text": "The Code Comment\nMany times, we want to include notes with our code, to remind ourselves why we did what we did. In these cases, we don’t want R to try to evaluate these notes, so we use a special character to mark our notes as “code comments”.\n\n2 + 4 + 6 + 8\n\n[1] 20\n\n# Who do you appreciate?\n\n\n\n\n\n\n\nExercises\n\n\n\n\nIs the character string “florida” equal to the character string “Florida”?\nInput TRUE | FALSE. What does this evaluate to? What about FALSE | TRUE? What do you think the “|” symbol represents?\nWhat simple comparison symbol should replace ??? in TRUE ??? FALSE to make R return FALSE?"
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#what-is-an-object",
    "href": "lessons/lesson02_introduction_to_R.html#what-is-an-object",
    "title": "Lesson 2: Introduction to R",
    "section": "What is an Object?",
    "text": "What is an Object?\nAn object is like a basket or container to hold stuff. Let’s make our very first object. We are going to create an object named x, and store the number 2 in it:\n\nx <- 2\n\nNow, we can recall this value any time we evaluate x.\n\nx\n\n[1] 2\n\n\nNow look at the “Environment” pane on the top right. You should see this:\n\nWhat happened? Consider this analogy: you have a meal container, you put the number 2 in it, and you label the container as x.\n\nSo far, you have used “containers” without labelling them. When you executed 24 * 7, R created a container and put the number 168 in it. However, R is like a vigilant office administrator: anything unlabelled in the refrigerator will be tossed out! Thus, if you wanted access to this number again, you must calculate 24 * 7 from scratch.\nWe can perform calculations with objects just like we could with anything contained in that object. For instance, if you wanted 10 to the power of 2, we see that the following are equivalent:\n\n10 ^ 2\n\n[1] 100\n\n10 ^ x\n\n[1] 100\n\n\nJust like any real lunch container, we can always empty out old food and put new food in it. To do this, we simply assign some new value to x:\n\nx <- 3\n\n\n\n\n\n\n\nTip\n\n\n\nYou can use the keyboard shortcut Alt + - to insert the <- symbol with spaces around it. Recall that to use a keyboard shortcut, the “+” symbol means “press these keys at the same time”.\n\n\n\n\n\n\n\n\nExercises\n\n\n\n\nCreate an object named myState that holds your current state of residence (e.g., “Florida”). Use the logical check for equality to show that the myState object and the object “florida” are not equal.\nCreate a new object y which is x + 3. Examine y. Now assign x to be “FL”. What happens to y? Why? What does this tell you about x?"
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#vectors",
    "href": "lessons/lesson02_introduction_to_R.html#vectors",
    "title": "Lesson 2: Introduction to R",
    "section": "Vectors",
    "text": "Vectors\nRecall that our examples had scalar values? R, however, is designed to work with ordered sets of values, known as a vector. There are a few simple ways to make vectors in R, depending on what you want these vectors to contain. Let’s first make a vector of the digits on a keypad.\n\nkeypad <- 0:9\n\nWe see that the syntax a:b creates a sequence of integers from a to b. We can do everything with a vector of numbers that we could do with a scalar value:\n\nkeypad + 3\n\n [1]  3  4  5  6  7  8  9 10 11 12\n\nkeypad * 2\n\n [1]  0  2  4  6  8 10 12 14 16 18\n\n10 - keypad\n\n [1] 10  9  8  7  6  5  4  3  2  1\n\n2 ^ keypad\n\n [1]   1   2   4   8  16  32  64 128 256 512\n\nkeypad < 5\n\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n\n\n\n\nExercises\n\n\n\n\nCreate a sequence from 70 to 100. How does the display of this vector differ from the display of the object keypad?\nCreate a vector called revKeypad with the integers from 9 to 0.\nAll of the values we combined with the keypad vector were scalars. Multiply two vectors together: revKeypad * keypad. What happened? Is this what you expected?\nCreate a new vector of integers from -1 to 1. Multiply this new vector by keypad. What happened? Is this what you expected?"
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#the-concatenate-function",
    "href": "lessons/lesson02_introduction_to_R.html#the-concatenate-function",
    "title": "Lesson 2: Introduction to R",
    "section": "The “Concatenate” Function",
    "text": "The “Concatenate” Function\nOne of the most important functions you will learn is the function to create simple vectors:\n\nc(1, 3, 6, 12)\n\n[1]  1  3  6 12\n\n\nThe c() function will put almost anything you want into a single vector, provided that they are all similar things. For instance\n\nme <- c(\"Prof.\", \"Gabriel\", \"J.\", \"Odom\", \"PhD\", \"ThD\")\nme\n\n[1] \"Prof.\"   \"Gabriel\" \"J.\"      \"Odom\"    \"PhD\"     \"ThD\""
  },
  {
    "objectID": "lessons/lesson02_introduction_to_R.html#function-components",
    "href": "lessons/lesson02_introduction_to_R.html#function-components",
    "title": "Lesson 2: Introduction to R",
    "section": "Function Components",
    "text": "Function Components\nFunctions have three main components: its name, its arguments’ names, and its arguments’ values. For instance, the function to take an arithmetic mean in R is mean(). When you type mean in the Console pane, RStudio displays a hint on how to use the function. Let’s use this hint to find the expected roll on a six-sided die:\n\nmean(x = 1:6)\n\n[1] 3.5\n\n\nWe unpack this as follows:\n\nThe function is named “mean”.\nThe mean function has an argument named “x”.\nWe supply the vector of integers from 1 to 6 as the value to the argument “x”.\n\nWe can even put functions inside of other functions:\n\nlog(c(10, 100, 1000))\n\n[1] 2.302585 4.605170 6.907755\n\n\nNotice that the name of the argument to the mean() function is “x”. Most functions have named arguments, but the c() function does not. It allows you to choose your own names.\n\n\n\n\n\n\nExercises\n\n\n\n\nCreate a vector of your first name, last name, and your degrees with the c() function.\nCreate the same vector as above, but name each of the components as you create the vector. Hint: think back to how we referenced the name of the argument for the mean() function."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html",
    "href": "lessons/lesson03_introduction_to_Quarto.html",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "",
    "text": "What did we learn last class?\n\nEverything in R is an Object. Objects are baskets that are labelled and hold values. We learned about objects that contain character, numeric, or logical information, among other things.\nCreate new objects with containerName <- value syntax.\nR is a vectorised language: it treats single values as part of a larger set.\nUse functions with functionName(argumentName = argumentValue) syntax.\nGet help with ? or Google."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#setting-up-a-basic-qurto-file",
    "href": "lessons/lesson03_introduction_to_Quarto.html#setting-up-a-basic-qurto-file",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Setting up a Basic Qurto File",
    "text": "Setting up a Basic Qurto File\n\n\n\n\n\n\nExercise\n\n\n\nGo to “File” > “New File” > “Quarto Document…”.\n\n\nThis window appears, giving us some options:\n\nThis window gives us a few options:\n\nType of document:\n\nDocument (plain manuscript style)\nPresentation (slide deck)\nShiny (interactive website)\nFrom Template (download a template from a journal or major conference, and write your manuscript to their formatting specifications)\n\nTitle and Author(s): if you are working in a group, this is where you add the names of your co-authors\nOutput Format:\n\nHTML (the default). This is the recommended starting place for any document. I will show you how to change this output type for a document that you have already written. We will use this option now, as it is the easiest to learn.\nPDF (advanced). This output style requires that you have additional advanced software installed, such as Windows MiKTeX or MacOS MacTeX. If you plan to use LaTeX to write your PhD dissertation, then you should learn how to use these tools; otherwise, avoid this option. Most people don’t need it.\nWORD (intermediate). This output style requires you to have MS Word installed on your computer (most people do). We will use this option for our reports later in the semester.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCustomise your title and author fields. Once you have finished your customization, click “OK”."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#inspecting-your-quarto-file",
    "href": "lessons/lesson03_introduction_to_Quarto.html#inspecting-your-quarto-file",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Inspecting your Quarto File",
    "text": "Inspecting your Quarto File\nWe should all see this basic Quarto template:\n\nLet’s dive in to the structure and syntax of this document.\n\nThe Meta-Data Header\nThe first few lines of the document are the document header. These lines tell R crucial information about how to build your report. The entire header, and all of the document options in it, are bounded by the three horizontal dashes (---) above and below.\nCurrently our header is quite basic. It includes:\n\nThe title of the document; title: \"My First Quarto\"\nWho wrote it: author: \"Gabriel Odom\"\nToday’s date: date: \"format(Sys.time(), '%b %d, %Y')\" (this looks crazy, but don’t worry about it now; we will learn what this means later if we need to)\nThe output type: format: html\n\nNotice that each one of these options (other than the date) are directly filled by your choices in the previous window.\n\n\nCode Chunks\nThe next thing we see is a code chunk. Code chunks look like this:\n\nThe components are:\n\nComputing language: Quarto documents can compile more than just R code, but we specify the language R here (with r).\nChunk name: this part is not required, but it can be helpful if you have errors in your code to know where they come from.\nChunk options: there are a few common options, which we will discuss later. This echo=false option means that this code chunk will not be included in the report output.\nChunk delimiters: all code chunks start and end with three backticks (```). If you want code that will run in a certain language (which most of the time, we do), add {} after the opening set of backtick delimiters, and put the language in first. For example, a basic code chunk could look like\n\n\n\nChunk body: this is where you put the actual R code that you want to compute.\n\nNotice two more things: 1) code chunks are on a grey background so they are easier to spot in the document, and 2) you can test the code in the chunk by clicking the green “Run Current Chunk” button on the top right.\n\n\nMarkup Text\nNow that you have a report with a header and some code, you need to explain what your code is doing and why. This is where the plain text comes in. Outside of a code chunk, type anything you want. You can even include pictures and tables. We will discuss these options, and the text formatting options, later.\n\n\n\n\n\n\nExercise\n\n\n\nSave the report. Mac Users: make sure you add .qmd to the end of the file name."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#render-your-report",
    "href": "lessons/lesson03_introduction_to_Quarto.html#render-your-report",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Render your Report",
    "text": "Render your Report\nNow that you have saved the Quarto file, you can “Render” your report.\n\n\n\n\n\n\nExercise\n\n\n\nRender your report. This may require you to install some packages, so click “OK” on the installation popup.\n\n\n\nWhile your report is building, notice that the “Console” pane has a new tab called “Background Jobs”. If this tab isn’t already open, click on it. You should see the following (I’ve annotated some of the important components in blue):\n\nNote that the names of the code chunks appear in this build report, as well as their options. Any text that doesn’t include R code to evaluate is labelled as “ordinary text without R code”. We can also see the progress in percent on the right side of the report."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#inspect-the-final-product",
    "href": "lessons/lesson03_introduction_to_Quarto.html#inspect-the-final-product",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Inspect the Final Product",
    "text": "Inspect the Final Product\nFinally, we have a rendered report!\n\nWe can see how each of the components of the original .qmd file control the look of the report itself. We can see that the meta-data set the title, author, and date of the report. We can see how the typed text is formatted in the final report.\n\n\n\n\n\n\nExercise\n\n\n\nCompare the three code chunks and their options with what R code appears in the report. Can you explain what the code chunk options are doing?"
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#the-quarto-guide",
    "href": "lessons/lesson03_introduction_to_Quarto.html#the-quarto-guide",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "The Quarto Guide",
    "text": "The Quarto Guide\nSo that you don’t have to try to remember all of what we just covered in excruciating detail, there is a very handy website with all of the major points of today’s lesson: https://quarto.org/."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#including-code-chunks",
    "href": "lessons/lesson03_introduction_to_Quarto.html#including-code-chunks",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Including Code Chunks",
    "text": "Including Code Chunks\nTo construct your own report, you will need to create your own code chunks. The keyboard shortcut for this is CTRL + Alt + I on Windows, CMD + Alt + I on Mac. This will insert a basic code chunk with the R language selected. From there, you can name your chunk, add chunk options, and include code for R to execute. For chunk options, see Section 5 of the cheat sheet."
  },
  {
    "objectID": "lessons/lesson03_introduction_to_Quarto.html#annotating-your-work",
    "href": "lessons/lesson03_introduction_to_Quarto.html#annotating-your-work",
    "title": "Lesson 3: Quarto for Reproducible Reports",
    "section": "Annotating your Work",
    "text": "Annotating your Work\nGood code has good explanations. Whenever you write code, you should include explanations for why you are doing what you are doing. Good code should be readable, in the sense that someone who knows the language can look at the code and see what you are doing. However, no one but you knows exactly why you chose to do what you did in the way that you did it.\nAs will most textual explanation, we often need to organize it, format it, and add supplemental figures and tables to explain it. Here are the rules for formatting your report:\n\n\n\n\n\n\n\nExercises\n\n\n\n\nMake a Quarto report to include some of your notes from the past few lectures. Include:\n\ncode examples\nannotations for what you learned about the code you had to write\nan image of a meme that you find funny (look at the cheat sheet for how to include images) as a hyperlink\n\nRender your report as an .html document first, and check to see that your formatting is appropriate.\nAlso render your report as a Word document. Note the slight changes in formatting.\n\n\n\nCongratulations! You are now well on your way to writing powerful and flexible scientific reports with Quarto.\n\n\n\n\n\n\nFinal Exercise\n\n\n\nInstall the tidyverse package the same way you installed the knitr package above. (We need it for next class.)"
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html",
    "href": "lessons/lesson01_GreaterDataScience.html",
    "title": "Lesson 01: Overview of Data Science",
    "section": "",
    "text": "We will cover the following:\n\nThe Fear Factor\nThe Syllabus\nWhat is Data Science?\nWhat is Reproducibility?\n\"Hello, World\""
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#data-preparation-and-exploration",
    "href": "lessons/lesson01_GreaterDataScience.html#data-preparation-and-exploration",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Data Preparation and Exploration",
    "text": "Data Preparation and Exploration\nThis is the portion of data science that deals with structuring your data appropriately (more on this later), exploratory data analysis, and data cleaning and preprocessing. For this part of data science, traditional statistics departments discuss only exploratory data analysis.\n\nExamples: designing the questions on a patient survey, creating a database to hold clinical trials data, finding the most common answers to a question, finding the largest or smallest values of a measurement, reporting the proportion of missing answers to a battery of questions between three cohorts."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#data-representation-and-transformation",
    "href": "lessons/lesson01_GreaterDataScience.html#data-representation-and-transformation",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Data Representation and Transformation",
    "text": "Data Representation and Transformation\nThis deals with retreving data from databases or online repositories, changing and organizing the format of the data files, and using mathematical or logical transformations on recorded values. For this portion of data science, traditional statistics departments only discuss mathematical transformations and their validity.\n\nExamples: extracting subject data from RedCap, building EMR reports, organizing hundreds or thousands of case report forms into a few data files, transforming age in months or weeks to age in years, grouping free-form text (“florida”, “Florida”, “fl”, and “FL” together)."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#computing-with-data",
    "href": "lessons/lesson01_GreaterDataScience.html#computing-with-data",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Computing with Data",
    "text": "Computing with Data\nThis part of data science concerns creating new programming languages, developing algorithms, using programming languages to automate data preparation, representation, and exploration, and packaging code for easier use. Of these, traditional statistics departments have only cared about algorithms (and sometimes not even that). However, many statisticians are starting to change their focus where this area is concerned. In this class you will learn parts of a few different computing and reporting languages, such as R, SAS, SQL, markdown and LaTeX.\n\nExamples: the R language was created to give statisticians and data scientists more control over their research, algorithms to fit statistical and mathematical models are created all the time, and we can create “packages” of computer code to repeat the same types of analyses on new data sets."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#data-modeling",
    "href": "lessons/lesson01_GreaterDataScience.html#data-modeling",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Data Modeling",
    "text": "Data Modeling\nThis part of data science is the most well-known portion. It is what most lay-people consider “data science”: statistical modelling and machine learning. This is where simple techniques like t-tests, linear regression, or ANOVA come in, but it also includes highly complex models and routines such as deep neural networks, random coefficient mixed models, support vector machines, or discriminant analysis. Traditional statistics departments have historically taught or developed most of these techniques, although some interesting modern research has come from computer science and econometrics."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#data-visualization-and-presentation",
    "href": "lessons/lesson01_GreaterDataScience.html#data-visualization-and-presentation",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Data Visualization and Presentation",
    "text": "Data Visualization and Presentation\nThis portion of data science includes all sorts of visualizations, from plots to interactive websites and applets. Data visualisation itself is nice, but using computer code to generate these visualizations is of paramount importance. Without the data and code to create the visualization, it can not be reproducible. Furthermore, the presentation of data in order to further an argument or claim is part of visual rhetoric, and is subject to questions of ethics. In traditional statistics departments, some of these tools are used, but rarely taught.\n\nExamples: making a scatterplot comparing SAT scores at different levels of household income, making a map shading counties in Florida by their ovarian cancer rates, designing a website to plot demographic information based on user selections.\n\n“A picture is worth a thousand words. Make sure your picture says the right thousand words.”"
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#science-about-data-science",
    "href": "lessons/lesson01_GreaterDataScience.html#science-about-data-science",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Science about Data Science",
    "text": "Science about Data Science\nThis portion of data science involves research meta-analysis about the utility of statistical and computational tools across entire disciplines, including applying data science concepts in disciplines untouched by data science. Currently, this is an area of active research in data science itself. This portion of the discipline identifies the boundaries of the discipline itself, the proper and ethical uses for data science, and experiments with the best ways to teach data science concepts. As this section of data science deals with philosophy and ethics, it has hardly anything to do with academic statistics.\n\nExamples: apply machine learning to analyze the provenance of art owned by Jews that had been seized by the Nazis or property owned by political dissenters seized by the Soviets, creating online courses to teach the basics of data science and reproducible research to non-scientists, writing commentary on the ethics of misleading graphs and figures in political campaigns."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#the-reproducibility-crisis",
    "href": "lessons/lesson01_GreaterDataScience.html#the-reproducibility-crisis",
    "title": "Lesson 01: Overview of Data Science",
    "section": "The Reproducibility Crisis",
    "text": "The Reproducibility Crisis\nPublished bio-science is largely not reproducible:\n\nOncology: 53 published articles tested, six successes (11%) (Nature, 2012)\nPsychology: 100 published articles, 39 successes (Nature News, 2015); 71 published articles tested, 92 replication attempts, 35 successes (38%; the PsychFileDrawer project is ongoing).\nPharmacology: 67 published models tested, 14 successes (21%) (Nature Reviews, 2011)"
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#the-ioannidis-crusade",
    "href": "lessons/lesson01_GreaterDataScience.html#the-ioannidis-crusade",
    "title": "Lesson 01: Overview of Data Science",
    "section": "The Ioannidis crusade",
    "text": "The Ioannidis crusade\nJohn Ioannidis, physician scientist at Stanford, speaks harshly against the lack of replicability in science:\n\n“Replication validity of genetic association studies” (2001)\n“Contradicted and Initially Stronger Effects in Highly Cited Clinical Research” (2005)\n“Why Most Published Research Findings Are False” (2005)\n“Why Most Clinical Research Is Not Useful” (2016)"
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#reproducible-data-science",
    "href": "lessons/lesson01_GreaterDataScience.html#reproducible-data-science",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Reproducible Data Science",
    "text": "Reproducible Data Science\nBefore reproducibility must come preproducibility.\n“Instead of arguing about whether results hold up, let’s push to provide enough information for others to repeat the experiments … In computational science, ‘reproducible’ often means that enough information is provided to allow a dedicated reader to repeat the calculations in the paper for herself.”\n– Philip B. Stark, Professor of Statistics, UC Berkeley"
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#use-code",
    "href": "lessons/lesson01_GreaterDataScience.html#use-code",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Use Code!",
    "text": "Use Code!\nIf you want your analyses and figures to be reproducible, then you must use computer code to do this. Point-and-click software does not (usually) give you a record of your steps or allow you to repeat them. Building your data management, data modelling, and visualizations steps in a programming language means that you always have the tools necessary to repeat your work. In this class, you will learn how to write computer code to clean and transform your data, perform your analyses, and build the figures and tables for your papers. If you do this properly, this will ensure that anyone can recreate your analysis results, figures, and tables relatively quickly and painlessly."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#downloading-and-installing-r",
    "href": "lessons/lesson01_GreaterDataScience.html#downloading-and-installing-r",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Downloading and Installing R",
    "text": "Downloading and Installing R\n\nFor Windows\n\nOpen an internet browser and go to https://www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\n\nClick on the “Download R for Windows” link at the top of the page.\n\nClick on the “install R for the first time” link at the top of the page.\nClick “Download R for Windows” and save the executable file somewhere on your computer (your desktop is fine, because you will delete this file later).\nDouble-click on the .exe file to “run” it and follow the installation instructions (click “Next” or “Allow” a bunch of times).\n\n\n\nFor Mac\n\nOpen an internet browser and go to https://www.r-project.org.\nClick the “download R” link in the middle of the page under “Getting Started.”\nSelect a CRAN location (a mirror site) and click the corresponding link.\nClick on the “Download R for (Mac) OS X” link at the top of the page.\nClick on the file containing the latest version of R under “Files.”\nSave the .pkg file (to your desktop; you will delete it at the end)\nDouble-click the .pkg file to open, and follow the installation instructions (click “Next” or “Allow” a bunch).\n\nNow that R is installed, you need to download and install RStudio."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#download-and-install-rstudio",
    "href": "lessons/lesson01_GreaterDataScience.html#download-and-install-rstudio",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Download and Install RStudio",
    "text": "Download and Install RStudio\n\nFor Windows\n\nGo to https://www.rstudio.com and click on the “Download RStudio” button.\nClick on “Download RStudio Desktop.”\nClick on the version recommended for your system, or the latest Windows version, and save the executable file (probably to your desktop, because we’re just going to delete it afterwards).\nDouble-click on the .exe file and follow the installation instructions (click “Next” or “Allow” a bunch of times).\n\n\n\nFor Mac\n\nGo to https://www.rstudio.com and click on the “Download RStudio” button.\nClick on “Download RStudio Desktop.”\nClick on the version recommended for your system, or the latest Mac version, and save the .dmg (disk image) file on your computer (probably to your desktop, because we are just going to delete it later)\nDouble-click the .dmg file to open it, and then drag and drop it to your applications folder."
  },
  {
    "objectID": "lessons/lesson01_GreaterDataScience.html#check-the-install",
    "href": "lessons/lesson01_GreaterDataScience.html#check-the-install",
    "title": "Lesson 01: Overview of Data Science",
    "section": "Check the Install",
    "text": "Check the Install\nWhether the installation worked or not, you should delete the install files to clean up your computer. Hopefully you can find them easily (if you saved them to the desktop, they should be easy to find).\nFind RStudio on your computer and open it. You should see a window that looks like this:\n\nThis application window is broken into three panes: the console pane, the environment pane, and the file pane.\n\nOur Very First R Code\nIn the console pane, move your cursor to the prompt (the > symbol). Type (you don’t have to type the > symbol; it’s just there for reference)\n\n> \"Hello, world!\"\n\nYou should see your welcome message displayed back to you. Congratulations! You have just executed your very first R code. Unfortunately, things get a touch more challenging after this, but that is why we are here: to learn."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html",
    "href": "lessons/lesson04_ggplot_examples.html",
    "title": "ggplot Examples",
    "section": "",
    "text": "This chapter is a supplemental chapter to Lesson 04 containing many more ggplot2 examples and a thorough discussion of colour palettes. These examples also make use of some other R packages we haven’t seen yet. If you need some of these packages, make sure to “uncomment” the install.packages() call for the packages you need.\n\n# install.packages(\"Stat2Data\")\n# install.packages(\"RColorBrewer\")\n# install.packages(\"jtools\")\n# install.packages(\"viridis\")\n# install.packages(\"ggthemes\")\n# install.packages(\"xkcd\")\n\nlibrary(Stat2Data)\nlibrary(RColorBrewer)\nlibrary(jtools)\nlibrary(viridis)\nlibrary(xkcd)\nlibrary(ggthemes)\nlibrary(tidyverse)\nset.seed(012922)"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#exercise",
    "href": "lessons/lesson04_ggplot_examples.html#exercise",
    "title": "ggplot Examples",
    "section": "Exercise",
    "text": "Exercise\nDiscuss this plot with your neighbours. What do you like about this plot? What is it missing?"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#title-and-related",
    "href": "lessons/lesson04_ggplot_examples.html#title-and-related",
    "title": "ggplot Examples",
    "section": "Title (and related)",
    "text": "Title (and related)\nGive your plots informative titles. An informative title helps tell the story of the plot. Here are two examples:\n\nBAD: Relationship between HS GPA and college GPA\n\n\nGOOD: High school GPA is positively related to college GPA\n\nHere’s a title with more information (to show how you can add additional details).\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) + \n  labs(\n    title = \"High school GPA is positively related to college GPA, \\nespecially for girls\", \n    subtitle = \"Among students at X University\", \n    caption = \"Data from FirstYearGPA in the Stat2Data package\", \n    tag = \"Figure 1\",\n    alt = \"Scatter plot showing the positive relationship between HS GPA and\n    college GPA, colored by student gender\",\n    x = \"High School GPA\",\n    y = \"College GPA\"\n  ) +\n  geom_point() \n\n\n\n\nThat’s a bit much, so let’s just stick with the title going forward.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  )  +\n  labs(\n    title = \"High school GPA is positively related to college GPA, \\nespecially for girls\"\n  ) +\n  geom_point()"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#x-and-y-axis-labels",
    "href": "lessons/lesson04_ggplot_examples.html#x-and-y-axis-labels",
    "title": "ggplot Examples",
    "section": "X and Y axis labels",
    "text": "X and Y axis labels\nLet’s change the X and Y axes to be more informative. These aren’t the worst named variables, but you do need to infer that GPA is probably for college. Unless you go look at the information about the dataset – but we want our plot to speak for itself.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  )  +\n  labs(\n    x = \"High school GPA\", \n    y = \"First year college GPA\"\n  ) +\n  geom_point()\n\n\n\n\nYou can also do this using the scale() functions:\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) + \n  scale_x_continuous(name = \"High school GPA\") +\n  scale_y_continuous(name = \"First year college GPA\") +\n  geom_point()"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#x-and-y-axis-limits",
    "href": "lessons/lesson04_ggplot_examples.html#x-and-y-axis-limits",
    "title": "ggplot Examples",
    "section": "X and Y axis limits",
    "text": "X and Y axis limits\nSomething else you might want to do sometimes to provide context for your plot and data is adjust the limits of the axes beyond the values of the data. In this case, it would make it easier to see if the values run the full (potential) range of the variable.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) + \n  xlim(0, 4) + \n  ylim(0, 4) +\n  geom_point()\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nYou can also do this using the scale() functions:\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) + \n  scale_x_continuous(limits = c(2, 4)) +\n  scale_y_continuous(limits = c(2, 4)) +\n  geom_point()\n\nWarning: Removed 3 rows containing missing values (`geom_point()`).\n\n\n\n\n\nEither way, you can see that the values don’t run the full range of potential values. The X axis is probably because they collected data from college students and it’s harder to get into college if you have a very low GPA."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#legend-title-and-labels",
    "href": "lessons/lesson04_ggplot_examples.html#legend-title-and-labels",
    "title": "ggplot Examples",
    "section": "Legend title and labels",
    "text": "Legend title and labels\nThe way to change the legend title is not at all obvious. And there are multiple ways to do it.\nThe easiest thing to do is use the labs() function, but there’s not an argument that explicitly has to do with the legend. The argument ties back to how you mapped the variable in the original plot. You can also only change the title of the legend with this function, not the labels.\nIn base_plot_gg, we used color = as_factor(Male) to map color onto the variable Male. So we’ll use color here.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) + \n  labs(color = \"Gender\") +\n  geom_point()\n\n\n\n\nA more general way is to use the scale_color_discrete() function, which allows you to change the title and labels. There are several of these functions, all of the same form:\n\nscale_color_discrete()\nscale_fill_discrete()\nscale_linetype_discrete()\nscale_shape_discrete()\nscale_size_discrete()\nscale_alpha_discrete()\n\nUse the appropriate one for your variable type: if you mapped the variable to the fill attribute then use fill; if you mapped the variable to the shape attribute then use shape; etc.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) +\n  scale_color_discrete(\n    name = \"Sex\",\n    labels = c(\"Female\", \"Male\")\n  ) +\n  geom_point()\n\n\n\n\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = as_factor(Male)\n  ) +\n  scale_color_discrete(\n    name = \"Sex\",\n    labels = c(\"Female\", \"Male\")\n  ) +\n  geom_point()"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#color-palettes",
    "href": "lessons/lesson04_ggplot_examples.html#color-palettes",
    "title": "ggplot Examples",
    "section": "Color palettes",
    "text": "Color palettes\n\nset theme for whole document\nAdd titles\nChanging axis, legend, and other labels\nText, size, font, color, etc.\nModifying background colors\nRotating objects\nOrdering variable options (alphabetical, increasing, etc.)"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#changing-the-color-palette",
    "href": "lessons/lesson04_ggplot_examples.html#changing-the-color-palette",
    "title": "ggplot Examples",
    "section": "Changing the color palette",
    "text": "Changing the color palette\nThe default colors are fine. They’re easy to distinguish (for me), but they might not work well for someone who is color blind."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#color-blind-friendly-color-palettes",
    "href": "lessons/lesson04_ggplot_examples.html#color-blind-friendly-color-palettes",
    "title": "ggplot Examples",
    "section": "Color blind friendly color palettes",
    "text": "Color blind friendly color palettes\nviridis is a widely-used color palette package that has several colorblind-friendly (and black-and-white friendly) color palettes. The vignette for the package, which is kind of the article introducing it and how it works, is here: https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html\n\nbase_plot_gg + \n  scale_color_viridis(discrete = TRUE)\n\n\n\n\nI find this a little hard to see. So maybe not the best choice.\nNotice the warning:\n## Scale for 'colour' is already present. Adding another scale for 'colour',\n## which will replace the existing scale.\nThis means that scale_color_viridis() overwrites scale_color_discrete() that we used above to label the legend. Notice that the legend title and labels are gone. We can add those arguments back into the viridis function and get them back.\n\nbase_plot_gg + \n  scale_color_viridis(\n    discrete = TRUE,\n    name = \"Sex\",\n    labels = c(\"Female\", \"Male\")\n  )"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#just-pick-some-colors",
    "href": "lessons/lesson04_ggplot_examples.html#just-pick-some-colors",
    "title": "ggplot Examples",
    "section": "Just pick some colors",
    "text": "Just pick some colors\nYou can also just choose some colors from the default ones available in R. Here, I’m using some hex color values, but you can also use RBG or CMYK or default R ones (i.e, “blue” or “red”).\nAgain, I’m adding the legend arguments back to this function.\n\nbase_plot_gg +\n  scale_color_manual(\n    values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"), \n    name = \"Sex\",\n    labels = c(\"Female\", \"Male\")\n  )\n\n\n\n\nFor a plot that uses the fill() option (like a bar plot), the command is fill_color_manual()."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#some-other-color-palettes",
    "href": "lessons/lesson04_ggplot_examples.html#some-other-color-palettes",
    "title": "ggplot Examples",
    "section": "Some other color palettes",
    "text": "Some other color palettes\nThe RColorBrewer package has several pre-built color palettes that you can use. You can view all the RColorBrewer palettes using\n\ndisplay.brewer.all()\n\n\n\n\nHere are just the palettes that work for color blind people:\n\ndisplay.brewer.all(colorblindFriendly = TRUE)\n\n\n\n\nThis is a qualitative palette, meaning that it works for nominal type variables. Again, adding the legend arguments back.\n\nbase_plot_gg +\n  scale_color_brewer(\n    palette = \"Set2\",\n    name = \"Sex\", \n    labels = c(\"Female\", \"Male\")\n  )\n\n\n\n\nA diverging palette that goes from red to yellow to blue:\n\nbase_plot_gg +\n  scale_color_brewer(\n    palette = \"RdYlBu\", \n    name = \"Sex\",\n    labels = c(\"Female\", \"Male\")\n  )\n\n\n\n\nThis is a sequential palette of blues:\n\nbase_plot_gg +\n  scale_color_brewer(\n    palette = \"Blues\",\n    name = \"Sex\", \n    labels = c(\"Female\", \"Male\")\n  )\n\n\n\n\nVery hard to see the lighter dots on the grey background."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#color-based-on-continuous-variable",
    "href": "lessons/lesson04_ggplot_examples.html#color-based-on-continuous-variable",
    "title": "ggplot Examples",
    "section": "Color based on continuous variable",
    "text": "Color based on continuous variable\nIf you wanted to color based on a continuous variable, you would get many more colors than just the two here. Imagine that, instead of gender, we wanted to color the points based on how many social sciences units they enrolled in (SS in the dataset).\n\nbase_plot_cont_gg &lt;- \n  ggplot(data = FirstYearGPA) +\n  aes(\n    x = HSGPA, \n    y = GPA, \n    color = SS\n  ) +\n  labs(\n    title = \"First year college GPA versus high school GPA\", \n    x = \"High school GPA\", \n    y = \"First year college GPA\", \n    color = \"Social studies units\"\n  ) +\n  geom_point()\n\nbase_plot_cont_gg\n\n\n\n\nAbove is the default color scheme from ggplot. Let’s create a gradient for the SS variable, starting at blue and increasing to red. The function scale_color_gradient() lets you specify just the ends and it fills in between.\n\nbase_plot_cont_gg +\n    scale_color_gradient(low = \"blue\", high = \"red\")\n\n\n\n\nNotice that the continuous variable doesn’t need any edits to the legend labels, so the we don’t have to repeat those options like we did for the plot with the gender variable."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#color-fill-commands",
    "href": "lessons/lesson04_ggplot_examples.html#color-fill-commands",
    "title": "ggplot Examples",
    "section": "Color fill commands",
    "text": "Color fill commands\nWhen you’re using plots that fill rather than create lines or points, the commands are similar but include fill in them. Here is an unedited bar plot that uses one of the RColorBrewer color palettes.\n\nggplot(data = FirstYearGPA) +\n  aes(\n    x = as_factor(Male), \n    fill = as_factor(FirstGen)\n  ) +\n  scale_fill_brewer(\n    palette = \"Set2\", \n    name = \"First generation status\", \n    labels = c(\"Not 1st gen\", \"1st gen\")\n  ) +\n  scale_x_discrete(\n    name = \"Gender\", \n    labels = c(\"Female\", \"Male\")\n  ) +\n  labs(y = \"Frequency\") +\n  geom_bar(position = \"dodge\")\n\n\n\n\nNotice that I added labels to the (discrete) X axis and (continuous) Y axis too."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#adding-annotations",
    "href": "lessons/lesson04_ggplot_examples.html#adding-annotations",
    "title": "ggplot Examples",
    "section": "Adding annotations",
    "text": "Adding annotations\nLet’s return to our base plot of first year college GPA versus high school GPA. We can add annotations to the plot to make things more clear or to point out specific aspects of the plot. For example, we can highlight the area of the plot that includes high school honor roll students, those with GPA &gt; 3.8.\n\nbase_plot_gg +\n  annotate(\n    geom = \"rect\", \n    xmin = 3.8, \n    xmax = 4.01, \n    ymin = 2.0, \n    ymax = 4.2, \n    fill = \"red\", \n    alpha = 0.2\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 3.4, \n    y = 4.1, \n    label = \"High school honor roll students \\n (GPA &gt; 3.8)\"\n  )\n\n\n\n\nThis is pretty basic and built in as an annotation.\nWhat about a line indicating academic probation?\n\nbase_plot_gg +\n  annotate(\n    geom = \"segment\", \n    x = 2.25, \n    xend = 4.25, \n    y = 2.5, \n    yend = 2.5, \n    linetype = \"dashed\", \n    color = \"blue\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 2.95, \n    y = 4.5, \n    label = \"Students below the line are on probation\"\n  )\n\n\n\n\nWe can add a line indicating equal GPAs in high school and college and add text explaining why that line is important.\n\nbase_plot_gg +\n  annotate(\n    geom = \"segment\", \n    x = 2.25, \n    xend = 4.25, \n    y = 2.25, \n    yend = 4.25, \n    linetype = \"dashed\", \n    color = \"blue\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 3.5, \n    y = 2, \n    label = \"Students below the line did better in high school\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 2.9, \n    y = 4.0, \n    label = \"Students above the line did better in college\"\n  )\n\n\n\n\nAnother use of the line segment could be to indicate which groups are significantly different from one another in a bar plot.\n\nggplot(data = FirstYearGPA) + \n  aes(\n    x = Male, \n    fill = as_factor(FirstGen)\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  geom_bar(position = \"dodge\") +\n  annotate(\n    geom = \"segment\", \n    x = -0.25, \n    xend = 0.25, \n    y = 105, \n    yend = 105, \n    color = \"black\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 0, \n    y = 108, \n    size = 8,\n    label = \"*\"\n  )\n\n\n\n\nThis doesn’t look as good as it could, so let’s clean up the axes and labels.\n\nggplot(data = FirstYearGPA) + \n  aes(\n    x = as_factor(Male), \n    fill = as_factor(FirstGen)\n  ) +\n  scale_fill_brewer(\n    palette = \"Set2\", \n    name = \"First generation status\", \n    labels = c(\"Not 1st gen\", \"1st gen\")\n  ) +\n  scale_x_discrete(\n    name = \"Sex\", \n    labels = c(\"0\" = \"Female\", \"1\" = \"Male\")\n  ) +\n  labs(y = \"Frequency\")+\n  geom_bar(position = \"dodge\") +\n  annotate(\n    geom = \"segment\", \n    x = 0.75, \n    xend = 1.25, \n    y = 105, \n    yend = 105, \n    color = \"black\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = 1, \n    y = 108, \n    size = 8,\n    label = \"*\"\n  )\n\n\n\n\nNotice a couple of things here:\n\nI had to specify that the gender variable was categorical with as_factor(Male). If I didn’t, the X axis labels didn’t show up at all (axis label or category labels).\nIn scale_x_discrete(), I specified which category the labels go with: \"0\" = \"Female\", \"1\" = \"Male\". This is not actually required but may be helpful.\nNotice the location of the line and star. I had to adjust their horizontal locations because factors in R do unexpected things: ggplot now places the bars at x = 1 and 2 instead of 0 and 1 because R is interpreting these factors as the numbers 1 and 2. We will discuss this more when we talk about atomic type coercion later this semester."
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#built-in-themes",
    "href": "lessons/lesson04_ggplot_examples.html#built-in-themes",
    "title": "ggplot Examples",
    "section": "Built-in themes",
    "text": "Built-in themes\nBlack and white theme:\n\nbase_plot_gg +\n  theme_bw()\n\n\n\n\nMinimal theme:\n\nbase_plot_gg + \n  theme_minimal()\n\n\n\n\nClassic theme:\n\nbase_plot_gg + \n  theme_classic()"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#package-themes",
    "href": "lessons/lesson04_ggplot_examples.html#package-themes",
    "title": "ggplot Examples",
    "section": "Package themes",
    "text": "Package themes\nThere is an APA theme in the jtools package, which was installed and loaded above. As of today, it is APA Publication Manual Version 6 compliant.\n\nbase_plot_gg +\n  theme_apa()\n\n\n\n\nWhat if I want my plot to look like it could be in the Wall Street Journal? (from the ggthemes package)\n\nbase_plot_gg + \n  theme_wsj()\n\n\n\n\nWell, maybe not ready for prime time there. They sure like LARGE titles. Our title has been mostly chopped off.\nWhat about the Economist? (also ggthemes)\n\nbase_plot_gg +\n  theme_economist()"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#editing-your-own-theme",
    "href": "lessons/lesson04_ggplot_examples.html#editing-your-own-theme",
    "title": "ggplot Examples",
    "section": "Editing your own theme",
    "text": "Editing your own theme\nYou can also change individual parts of the plot yourself. Maybe you just want all the text to be a little larger in a theme. This is good for presentations—the fonts are always a little too small to read well.\n\nbase_plot_gg + \n  theme_bw(base_size = 16)\n\n\n\n\nHow about changing the background of the plot (and the gridlines) to black to make it really striking?\n\nbase_plot_gg + \n  theme(\n    panel.background = element_rect(fill = \"black\"), \n    panel.grid = element_line(color = \"black\")\n  )\n\n\n\n\nAll of the objects you can modify are listed here: https://ggplot2.tidyverse.org/reference/theme.html.\n\n\n\n\n\n\nExercises\n\n\n\nExercises\n\nChange base_plot_gg to have larger font throughout, purple points for females, green points for males, a white background inside the plot area, and a grey background outside the plot area. Do this layer by layer. Take your time.\nDiscuss with your neighbour the strengths and weaknesses of this plot. Would you be proud to submit this plot to a journal? What could you do to improve it?"
  },
  {
    "objectID": "lessons/lesson04_ggplot_examples.html#exercises",
    "href": "lessons/lesson04_ggplot_examples.html#exercises",
    "title": "ggplot Examples",
    "section": "Exercises",
    "text": "Exercises\n\nChange base_plot_gg to have larger font throughout, purple points for females, green points for males, a white background inside the plot area, and a grey background outside the plot area. Do this layer by layer. Take your time.\nDiscuss with your neighbour the strengths and weaknesses of this plot. Would you be proud to submit this plot to a journal? What could you do to improve it?"
  }
]